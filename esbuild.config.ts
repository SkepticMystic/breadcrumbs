import builtins from "builtin-modules";
import copyNewer from "copy-newer";
import type {
	BuildOptions,
	Plugin,
	PluginBuild,
	TransformOptions,
} from "esbuild";
import esbuild from "esbuild";
import esbuildSvelte from "esbuild-svelte";
import { ensureFile } from "fs-extra";
import { createRequire } from "node:module";
import { dirname, join } from "node:path";
import process from "process";
import sveltePreprocess from "svelte-preprocess";
import { Pipe, type PipeConstructor } from "./fophidian";

import type { BuildOptionSpec } from "./fophidian.types";

// #  TOOLS
const require = createRequire(import.meta.url);
const ARTIFACTS_DIR = "./dist";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

// # DESTINATION PATHS
const relative_plugin_path = join(".obsidian", "plugins");
const { id, version } = require("./manifest-beta.json");

// # TOGGLES
const isProd = process.argv[2] === "production";
const isHotReload = process.env?.HOTRELOAD === "1" ? true : false;

const context: BuildOptionSpec = {
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins,
	],
	outfile: "./dist/main.js",
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: isProd ? false : "inline",
	treeShaking: true,
	plugins: [
		esbuildSvelte({
			compilerOptions: { css: true },
			preprocess: sveltePreprocess(),
		}),
	],
};
// # WORK HORSE

genMain();

// # TRANSFORM OPTIONS

function CopyManifestToDist(outdir = "./dist"): Plugin {
	return {
		name: "plugin:copy-manifest-to-dist",
		setup(build: PluginBuild) {
			build.onEnd(async () => {
				// if there's an outdir it overrides the outfile
				const _outDir =
					build.initialOptions.outdir ??
					dirname(build.initialOptions.outfile || outdir);

				const pattern = "manifest*.json";
				const destDir = ARTIFACTS_DIR;
				await copyNewer(pattern, destDir, {
					verbose: true,
					// actual place where copying files comes from
					cwd: ".",
				});
			});
		},
	};
}

function AddHotReloadPlugin(isHotReload: boolean = false): Plugin {
	return {
		name: "hotreload",
		setup(build: PluginBuild) {
			build.onEnd(async () => {
				if (isHotReload)
					await ensureFile(
						dirname(build.initialOptions.outfile || ARTIFACTS_DIR) +
							"/.hotreload",
					);
			});
		},
	};
}
function MoveArtifactsUsingPlugins(ARTIFACTS_DIR: string): Plugin {
	return {
		name: "plugin:move-artifacts",
		setup(build: PluginBuild) {
			build.onEnd(genCopy);
			async function genCopy() {
				// if there is an outdir override the destination dir to copy to.
				// if there is a outfile, use that outfile to determine the destination directory
				const destDir =
					build.initialOptions.outdir ??
					dirname(build.initialOptions.outfile || ARTIFACTS_DIR);

				const pattern = "{main.js,styles.css,manifest.json}";
				const copyNewerFig = {
					// opts.cwd: string - Same as glob's. The current working directory in which to search. Defaults to process.cwd(). (Included here because you'll most likely need it.) aka this is where your dist file is located;
					verbose: true,
					cwd: ARTIFACTS_DIR,
				};
				await copyNewer(
					// pattern: array|string - One or more glob patterns to select for the files to copy.
					pattern,
					// director to copy to
					destDir,
					copyNewerFig,
				).catch(console.log);
			}
		},
	};
}
// $HOME/neuro-atypical/.obsidian
async function genMain() {
	const PipeClass = Pipe as unknown as PipeConstructor;
	const dev_dir = join(
		process.env.OBSIDIAN_TEST_VAULT || "",
		relative_plugin_path,
		id + "-" + "beta",
	);
	const pipeInstance = new PipeClass(context);
	// Cannot use both outdir and outfile in esbuild
	const outdir = isProd === true ? "./dist" : dev_dir;
	const outfile = join(outdir, "main.js");
	pipeInstance
		// because i assigned the outfile directly to the test fault, that's where the main js will go. if your process.env.OBSIDIAN_TEST_VAULT is set to X, it will go to X;
		.assign({ outfile })
		.withInjectPlugins(
			CopyManifestToDist(),
			MoveArtifactsUsingPlugins(ARTIFACTS_DIR),
			AddHotReloadPlugin(isHotReload),
		)
		.genBuild(isProd, { debug: false });
}
